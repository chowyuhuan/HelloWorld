
帧同步
	
	同步操作
		强一致性
		确定性：相同的输入->相同的计算->相同的输出
		定点数，统一随机种子，没有当前操作者
		UDP：上行可靠，下行冗余
		UDP：上行可靠，SEQ，ACK，帧序号和确认保证，使用发送缓存(发送线程)和接受缓存(接收线程)，生产者消费者模型（无锁队列）
	游戏业务
		分层设计，逻辑层与表现层分离，帧数据驱动，逻辑帧15帧，表现60帧
		业务逻辑实现简单，想写单机游戏一样
		开发效率高
		PVP和PVE逻辑统一
	服务器承载
		游戏逻辑全部在客户端，服务器只负责转发，无游戏业务，实现简单，承载高
	网络流量
		由于只同步操作，同步的数据量低
	网络延迟
		对延迟要求较高
		逻辑层不能预演，只能表现层预演
		隐藏延迟技巧，主控英雄开始移动有加速过程，停止移动有减速过程
	网络抖动
		客户端帧缓存，逻辑层每秒15帧，缓存积压帧数多时加速机制，动态调整帧速率
	网络丢包与乱序
		下行动态冗余传输（MTU），客户端主动拉丢包数据，客户端帧超时机制，超过30帧丢弃，服务器不在下发
		丢失数据包较少时，使用UDP拉取丢失包，丢失数据包较多时，使用TCP拉取数据包
	断线重连
		需要重演，快照实现难，维护难
	录像回放和观战
		实现简单
		回放不能倒退
	不同步的原因
		逻辑Bug
		外挂
	不同步的处理
		服务器裁决
		服务器GameCore验证
	不同步的定位
		帧关键数据Hash校检
		当客户端发来战报请求结算时，询问其他客户端是否在同一帧结束战斗，如果其他客户端到达同一帧但并未结束战斗或服务器等待超时则结算失败
	不同步的排查
		发生不同步时上报最近帧同步日志
		日志方案
			手动插桩
			调用链追踪全日志方案
	外挂
		外挂容易
	适应游戏类型
		小地图实时竞技类游戏，战略类游戏

状态同步

	同步状态+RPC
		最终一致性
		同步游戏状态
	游戏业务
		业务实现复杂，尤其是状态非常复杂的游戏，实现业务时需时刻考虑同步问题
		开发效率低
	服务器承载
		权威服务器，服务器需要运行逻辑层，实现复杂，承载低
	网络流量
		需要进行流量优化
	网络延迟
		对延迟要求相对宽容
		客户端可以进行逻辑层预演及延迟补偿
	断线重连
		只需要同步当前游戏状态
	录像回放和观战
		快照及增量方式
		回放可以倒退到前面快照
	不同步的原因
		逻辑bug
	不同步的处理
		权威服务器
	不同步的定位
		？
	不同步的排查
		日志
	外挂
		外挂较难
	适应游戏类型
		MMORPG，无限大地图，射击类游戏


	角色认知，管理规划，团队建设，任务管理，管理沟通，管理方法论，管理之路
	职能，目标，团队，路径，能力，激励，分工，协作，梯队，文化
	薪资
	股票
	通道
	入职
	调薪
	住房补贴

	能力匹配度
	更好的融入团队
	公司文化了解
	职业通道评委
	换城市成本
	孩子顾虑
	工作节奏忙
	更好的投入工作
	更好的回报

	团队解散，希望做游戏，技术栈变化，自研游戏的可能很低，个人成长，职业规划
